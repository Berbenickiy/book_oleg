1. Название проекта
Book Oleg

2. Краткое описание
Book Oleg — это веб-приложение, разработанное на основе Flask, предназначенное для управления книгами и их жанрами. Приложение позволяет пользователям добавлять новые книги, просматривать последние добавленные книги, а также фильтровать книги по жанрам. Интерфейс приложения оформлен с использованием Bootstrap для обеспечения удобства и привлекательности.

Основные функции:

Добавление новых книг с указанием названия, автора и жанра.
Просмотр последних 15 добавленных книг на главной странице.
Просмотр всех книг, относящихся к определенному жанру.
Удобная навигация между различными разделами приложения.

3. Как запустить проект

Следуйте приведенным ниже шагам для установки и запуска Book Oleg на вашем локальном компьютере.

Требования
Python 3.7+
pip (менеджер пакетов Python)

-Создание виртуального окружения
Рекомендуется использовать виртуальное окружение для изоляции зависимостей проекта.

На Windows:
Копировать код
python -m venv venv
venv\Scripts\activate

На Unix/Linux/macOS:
python3 -m venv venv
source venv/bin/activate

-Установка зависимостей
После активации виртуального окружения установите необходимые зависимости с помощью pip. Убедитесь, что у вас есть файл requirements.txt в корне проекта.

pip install -r requirements.txt

-Настройка базы данных
Book Oleg использует SQLite в качестве базы данных по умолчанию. Следуйте нижеуказанным шагам для инициализации базы данных.

Инициализация миграций:
flask db init

Создание миграционных файлов:
flask db migrate -m "Initial migration." 

Применение миграций:
flask db upgrade

-Добавление тестовых данных
Для тестирования приложения вы можете добавить несколько жанров и книг через интерфейс или с помощью Flask Shell.

Добавление жанров через Flask Shell
Запустите Flask Shell:
flask shell

Внутри оболочки выполните следующие команды:
from app import db
from app.models import Genre

# Создание жанров
genre1 = Genre(name='Фантастика')
genre2 = Genre(name='Роман')
genre3 = Genre(name='Детектив')

# Добавление жанров в сессию
db.session.add_all([genre1, genre2, genre3])

# Применение изменений
db.session.commit()

Добавление книг через интерфейс
Перейдите на страницу добавления книги: http://127.0.0.1:5000/add_book
Заполните форму, указав название книги, автора и выбрав жанр из выпадающего списка.
Нажмите кнопку "Добавить книгу".

-Запуск приложения
После выполнения всех вышеуказанных шагов запустите Flask-приложение следующей командой:
python run.py

Или, если вы настроили переменные окружения и используете flask run:
На Windows (CMD):
set FLASK_APP=run.py
set FLASK_ENV=development
flask run

На Unix/Linux/macOS (bash):
export FLASK_APP=run.py
export FLASK_ENV=development
flask run
Приложение будет доступно по адресу: http://127.0.0.1:5000/




Думал на протяжении 4 секунд

Конечно! Ниже представлен полный набор информации для вашего проекта Book Oleg, включая название, описание, инструкции по запуску и тестированию.

Book Oleg
1. Название проекта
Book Oleg

2. Краткое описание
Book Oleg — это веб-приложение, разработанное на основе Flask, предназначенное для управления книгами и их жанрами. Приложение позволяет пользователям добавлять новые книги, просматривать последние добавленные книги, а также фильтровать книги по жанрам. Интерфейс приложения оформлен с использованием Bootstrap для обеспечения удобства и привлекательности.

Основные функции:

Добавление новых книг с указанием названия, автора и жанра.
Просмотр последних 15 добавленных книг на главной странице.
Просмотр всех книг, относящихся к определенному жанру.
Удобная навигация между различными разделами приложения.
3. Как запустить проект
Следуйте приведенным ниже шагам для установки и запуска Book Oleg на вашем локальном компьютере.

3.1. Требования
Python 3.7+
pip (менеджер пакетов Python)
Git (опционально, для клонирования репозитория)
3.2. Клонирование репозитория (опционально)
Если ваш проект находится в системе контроля версий, вы можете клонировать его с помощью Git:

bash
Копировать код
git clone https://github.com/yourusername/book_oleg.git
cd book_oleg
3.3. Создание виртуального окружения
Рекомендуется использовать виртуальное окружение для изоляции зависимостей проекта.

На Windows:
bash
Копировать код
python -m venv venv
venv\Scripts\activate
На Unix/Linux/macOS:
bash
Копировать код
python3 -m venv venv
source venv/bin/activate
3.4. Установка зависимостей
После активации виртуального окружения установите необходимые зависимости с помощью pip. Убедитесь, что у вас есть файл requirements.txt в корне проекта.

bash
Копировать код
pip install -r requirements.txt
Пример содержимого requirements.txt:

plaintext
Копировать код
Flask==2.3.2
Flask-WTF==1.1.1
Flask-SQLAlchemy==3.0.5
Flask-Migrate==4.0.4
WTForms==3.0.1
3.5. Настройка базы данных
Book Oleg использует SQLite в качестве базы данных по умолчанию. Следуйте нижеуказанным шагам для инициализации базы данных.

Инициализация миграций:

bash
Копировать код
flask db init
Создание миграционных файлов:

bash
Копировать код
flask db migrate -m "Initial migration."
Применение миграций:

bash
Копировать код
flask db upgrade
3.6. Добавление тестовых данных (опционально)
Для тестирования приложения вы можете добавить несколько жанров и книг через интерфейс или с помощью Flask Shell.

3.6.1. Добавление жанров через Flask Shell
Запустите Flask Shell:

bash
Копировать код
flask shell
Внутри оболочки выполните следующие команды:

python
Копировать код
from app import db
from app.models import Genre

# Создание жанров
genre1 = Genre(name='Фантастика')
genre2 = Genre(name='Роман')
genre3 = Genre(name='Детектив')

# Добавление жанров в сессию
db.session.add_all([genre1, genre2, genre3])

# Применение изменений
db.session.commit()
3.6.2. Добавление книг через интерфейс
Перейдите на страницу добавления книги: http://127.0.0.1:5000/add_book
Заполните форму, указав название книги, автора и выбрав жанр из выпадающего списка.
Нажмите кнопку "Добавить книгу".
3.7. Запуск приложения
После выполнения всех вышеуказанных шагов запустите Flask-приложение следующей командой:

bash
Копировать код
python run.py
Или, если вы настроили переменные окружения и используете flask run:

На Windows (CMD):
cmd
Копировать код
set FLASK_APP=run.py
set FLASK_ENV=development
flask run
На Unix/Linux/macOS (bash):
bash
Копировать код
export FLASK_APP=run.py
export FLASK_ENV=development
flask run
Приложение будет доступно по адресу: http://127.0.0.1:5000/

-Тестирование проекта
Список URL-адресов
URL	                Метод	      Описание
/	                 GET	      Главная страница, отображает последние 15 книг
/add_book	         GET	      Страница формы для добавления новой книги
/add_book	         POST	      Обработка формы добавления новой книги
/genre/<int:genre_id>	 GET	      Страница отображения всех книг выбранного жанра

Главная страница
URL: http://127.0.0.1:5000/
Метод: GET
Описание: Отображает список из последних 15 добавленных книг в порядке их создания. Каждая запись содержит название книги, автора и жанр. Название жанра является ссылкой на страницу соответствующего жанра.

Добавление новой книги
URL: http://127.0.0.1:5000/add_book
Метод: GET, POST
Описание:
GET: Отображает форму для добавления новой книги.
POST: Обрабатывает данные формы и добавляет новую книгу в базу данных.
Поля формы:
Название книги (обязательное)
Автор (обязательное)
Жанр (выбор из существующих жанров)

Страница жанра
URL: http://127.0.0.1:5000/genre/1 (замените 1 на ID нужного жанра)
Метод: GET
Описание: Отображает все книги, относящиеся к выбранному жанру. Каждая запись содержит название книги и автора.

Готовые данные для тестирования
Жанры
Фантастика (ID: 1)
Роман (ID: 2)
Детектив (ID: 3)

Книги
Название: Из трубы
Автор: Максимка
Жанр: Роман (ID: 2)

Название: Приключения в космосе
Автор: Иван Иванов
Жанр: Фантастика (ID: 1)

Название: Тайны большого города
Автор: Анна Петрова
Жанр: Детектив (ID: 3)


Добавление тестовых данных через Flask Shell
Запустите Flask Shell:

flask shell
Внутри оболочки выполните следующие команды:

from app import db
from app.models import Genre, Book

# Предполагается, что жанры уже добавлены
genre_fantasy = Genre.query.filter_by(name='Фантастика').first()
genre_romance = Genre.query.filter_by(name='Роман').first()
genre_detective = Genre.query.filter_by(name='Детектив').first()

# Создание книг
book1 = Book(title='Из трубы', author='Максимка', genre_id=genre_romance.id)
book2 = Book(title='Приключения в космосе', author='Иван Иванов', genre_id=genre_fantasy.id)
book3 = Book(title='Тайны большого города', author='Анна Петрова', genre_id=genre_detective.id)

# Добавление книг в сессию
db.session.add_all([book1, book2, book3])

# Применение изменений
db.session.commit()


Примеры запросов
Получение главной страницы
Запрос:
curl -X GET http://127.0.0.1:5000/

Ответ:
HTML-страница с перечнем последних 15 книг.

Получение страницы добавления книги
Запрос:
curl -X GET http://127.0.0.1:5000/add_book

Ответ:
HTML-форма для добавления новой книги.

Добавление новой книги
Запрос:
curl -X POST http://127.0.0.1:5000/add_book \
     -F "title=Новая книга" \
     -F "author=Автор Имя" \
     -F "genre=1"

Ответ:
Перенаправление на главную страницу с сообщением об успешном добавлении книги.

Получение страницы жанра
Запрос:
curl -X GET http://127.0.0.1:5000/genre/2

Ответ:
HTML-страница с перечнем всех книг жанра с ID 2.


